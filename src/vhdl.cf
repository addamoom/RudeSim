-- Topstuff-------------
entrypoints Prog ;

Program.   Prog ::= [TopDef] ;

separator nonempty TopDef "" ;

Library_Dec. TopDef ::= "LIBRARY " Ident ";" ; 

Library_Use. TopDef ::= "USE" Ident "." Ident "." Ident ";" ; -- Really bad but i wont bother with proper library support

-- Library_Use. TopDef ::= "USE" [Ident]";" ; --probably a better way to do it with . as separator but will generate more code

-- Entity ---------

Entity.  TopDef ::= "ENTITY" Ident "IS" "PORT" "(" [ Ports ] ")" ";" "END" "ENTITY" Ident ";" ;

separator Ports ";" ;

Inport.      Ports ::=  Ident ":" "IN" Type ;

Outport.   Ports ::=  Ident ":" "OUT" Type ;

Inoutport.    Ports ::=  Ident ":" "INOUT" Type ;

-- Architecture --------------

Arch. TopDef  ::= "ARCHITECTURE" Ident "OF" Ident "IS" [Pre_begin_statements] "BEGIN" [Post_begin_statements] "END" "ARCHITECTURE" Ident ";" ; 

separator Pre_begin_statements "" ;

separator Post_begin_statements "" ;

-- Pre_begin_statements --------

Signal_Decl. Pre_begin_statements ::= "SIGNAL" Ident ":" Type  ";"  ; 

Signal_Decl_W_Assign. Pre_begin_statements ::= "SIGNAL" Ident ":" Type ":=" Literal ";" ;

Constant_Decl. Pre_begin_statements ::= "CONSTANT" Ident ":" Type ";" ;

Constant_Decl_W_Assign. Pre_begin_statements ::= "CONSTANT" Ident ":" Type ":=" Literal ";" ;

Component. Pre_begin_statements ::= "COMPONENT" Ident "IS" "PORT" "(" [Ports] ")" ";" "END" "COMPONENT" Ident ";" ;

--- Post_begin_statements -----------------

Concurrent_Stm. Post_begin_statements ::= Concurrent_statement ;

Port_Map. Post_begin_statements ::= Ident ":" "COMPONENT" Ident "PORT" "MAP" "(" [Pmap_stm] ")" ";" ;

separator Pmap_stm "," ;

Port_Map_Internal_Statement. Pmap_stm ::= Ident "=>" Ident ;

-- Concurrent_statements ------------

Concurrent_Assignment. Concurrent_statement ::=  Ident "<=" Exp ";" ;

Concurrent_Assignment_W_AFTER. Concurrent_statement ::= Ident "<="  Exp "," [Ass_statements] ";" ;

separator Ass_statements "," ;

After_Component. Ass_statements ::= Exp "AFTER" Integer Ident ; -- Ident must be a timeunit.

When_Statement. Concurrent_statement ::= Ident "<=" [When_part] ";" ;

separator When_part "ELSE" ;

When_Component. When_part ::= Exp "WHEN" Exp ;

When_Finisher. When_part ::= Exp ;

Process_Statement. Concurrent_statement ::= Ident ":" "PROCESS" "(" [Ident] ")" "BEGIN" [Sequential_statement] "END PROCESS" ";" ;

separator Ident "," ;


-- Sequential statements----------------

Case_Statement. Sequential_statement ::= "CASE" Exp "IS" [Whens] "END CASE" ";" ;

separator Whens  "" ;

Case_Case. Whens ::= "WHEN" Exp "=>" [Sequential_statement]; -- Check if Exp is an identifier OTHERS

separator Sequential_statement  "" ;

If_Statement. Sequential_statement ::= "IF" Exp "=" Exp "THEN" [Sequential_statement] "END IF" ";" ; --this is really ugly and shoudl be done better

If_Else_Statement. Sequential_statement ::= "IF" Exp "=" Exp "THEN" [Sequential_statement] "ELSE" [Sequential_statement] "END IF" ";" ; --this is really ugly and shoudl be done better

Wait_For_Statement. Sequential_statement ::= "WAIT FOR" Integer Ident ";"; --Ident must be a time unit

Seq_Assignment. Sequential_statement ::= Ident "<=" Exp ";" ;

-- Expressions ------------------
 
coercions Exp 3 ;

E_Identifier. Exp3 ::= Ident ;

E_String. Exp3 ::= String ;

E_Integer. Exp3 ::= Integer ;

E_Std_Logic. Exp3 ::= Char ;

E_Vector_Ref. Exp2 ::= Ident "(" Integer ")" ; -- integer for now for simplicity

E_Add. Exp1 ::= Exp1 "+" Exp2 ;

E_Sub. Exp1 ::= Exp1 "-" Exp2 ;

E_Not. Exp ::= "NOT" Exp1 ;

E_Cmp. Exp1 ::= Exp1 Cmpop Exp2 ;

E_Equal.  Cmpop ::= "=" ;

E_Less.  Cmpop ::= "<" ;

E_More.  Cmpop ::= ">" ;

E_AND. Exp1 ::= Exp1 "AND" Exp2 ;
E_OR. Exp1 ::= Exp1 "OR" Exp2 ;
E_XOR. Exp1 ::= Exp1 "XOR" Exp2 ;
E_NAND. Exp1 ::= Exp1 "NAND" Exp2 ;
E_NOR. Exp1 ::= Exp1 "NOR" Exp2 ;
E_XNOR. Exp1 ::= Exp1 "XNOR" Exp2 ;

-- Types ---------------

Lit_string. Literal ::= String ; 

Lit_int. Literal ::= Integer ;

Lit_char. Literal ::= Char ;

T_std_logic. Type ::= "STD_LOGIC" ;

T_std_logic_vector. Type ::= "STD_LOGIC_VECTOR" "(" Integer "DOWNTO" Integer ")";

T_integer. Type ::= "INTEGER" ;

-- Comments -------------------
comment    "--" ;




Vhdl sim

parsa syntax med lbnf. för Att simulera kommer topvisitorn komma behöva köras massa gånger
den finns i main metoden i visitorklassen, se javalette typecheckern som kör den två ggr.

Iterera över den med fasta tidsintervall. I början så är nog bra att intervallet bara är en parameter som ges till programmet.

Första iterationen gör typecheckning. 

Nästa iteration är "state zero"  och samlar bara info om vilka parametrar som finns i en datastruktur och initializerar dom.
Alla parametrar intialiseras till antingen X eller ett värde givet av koden. Tänk igenom  datastrukturen noga, för den kommer användas mycket!

Nästa iteration påbörjar simuleringen vid tid 1 tidsenhet. Signalernas värde sätts utav koden baserat på förgående state, och lagras i nuvarande state. Om en signal assignas två ggr bör den bli X, går ju att kolla ifall en variabel är assignad i ett state eller inte. Borde vara enkelt ifall din datastruktur har en konstruktor som initializerar fält till "";
statet skrivs också till en waveformfil sok gtkwave kan läsa, kolla upp hur det funkar.
sen blir det nya statet det gamla och koden körs igen.

EDIT: kan vara så att alla post_begin_statements behöver köras två eller fler ggr eftersom saker är concurrent. Först kör du en gång och sparar vilken symbol som en signal är assignad till, eller en literal. When och process statements ignoreras tills de att deras sensitivitylist har ett literal värde. Andra gången bör nu fler signaler kunna assignas en literal. 

För att simulatorn ska kunna användas behöver du kunna ge den en testbenchfil och den ska kunna hitta DUT filen. För att göra det enkelt för dig kräv att den skickas med som parameter.




För att göra livet enkelt kommer du att ändra VHDL.
IEEE bibloteket antas altid vara inkluderat.
Compilern är ej case insensitive, 

Datatyper du bör ha: std_logic, std_logic_vector, integer.


statements som behövs: 
    topdefenitions:
        entity, architecture, library declaration
        
    pre_begin_statements: 
        signal, constant, Component.
    
    post_begin_statements:
        concurrent_statements, port_maps.
        
    concurrent_statements:
        process, when, assignment, after_assignment. 
        
    seq_only_statements:
        case, if, wait_for, assignment.
        
    expressions:
        identifier, vector_refer, addition, subtraction, multiplication, NOT, AND, OR. 
    timeunits:
        ps, ns, us, ms, s
        
        
    
        


Simuleringen är "inte så svår" eftersom du vet alla variablers tidigare tillstånd, så det är aldrig något okänt.





